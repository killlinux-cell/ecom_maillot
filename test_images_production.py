#!/usr/bin/env python
"""
Script de test des images en production
Diagnostique pourquoi les images ne s'affichent pas
"""

import os
import sys
from pathlib import Path
from django.conf import settings
from django.core.management import execute_from_command_line

def check_media_files():
    """V√©rifier la structure des fichiers media"""
    print("üîç V√©rification des fichiers media...")
    
    media_root = Path("media")
    if not media_root.exists():
        print("‚ùå Dossier media non trouv√©!")
        return False
    
    print(f"‚úÖ Dossier media trouv√©: {media_root.absolute()}")
    
    # V√©rifier les sous-dossiers
    subdirs = ['products', 'teams', 'categories']
    for subdir in subdirs:
        subdir_path = media_root / subdir
        if subdir_path.exists():
            files = list(subdir_path.glob('*'))
            print(f"üìÅ {subdir}: {len(files)} fichiers")
            if files:
                print(f"   Exemples: {[f.name for f in files[:3]]}")
        else:
            print(f"‚ö†Ô∏è  {subdir}: dossier non trouv√©")
    
    return True

def check_permissions():
    """V√©rifier les permissions des fichiers media"""
    print("\nüîê V√©rification des permissions...")
    
    media_root = Path("media")
    if not media_root.exists():
        return False
    
    try:
        # V√©rifier les permissions du dossier media
        stat = media_root.stat()
        print(f"Permissions media: {oct(stat.st_mode)[-3:]}")
        
        # V√©rifier les permissions des fichiers
        for subdir in ['products', 'teams', 'categories']:
            subdir_path = media_root / subdir
            if subdir_path.exists():
                files = list(subdir_path.glob('*'))[:3]
                for file in files:
                    stat = file.stat()
                    print(f"Permissions {file.name}: {oct(stat.st_mode)[-3:]}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des permissions: {e}")
        return False

def check_urls():
    """V√©rifier la configuration des URLs"""
    print("\nüåê V√©rification de la configuration des URLs...")
    
    # V√©rifier settings.py
    print("üìã Configuration Django:")
    print(f"   MEDIA_URL: {getattr(settings, 'MEDIA_URL', 'Non d√©fini')}")
    print(f"   MEDIA_ROOT: {getattr(settings, 'MEDIA_ROOT', 'Non d√©fini')}")
    print(f"   STATIC_URL: {getattr(settings, 'STATIC_URL', 'Non d√©fini')}")
    print(f"   STATIC_ROOT: {getattr(settings, 'STATIC_ROOT', 'Non d√©fini')}")
    
    # V√©rifier wsgi.py
    wsgi_path = Path("ecom_maillot/wsgi.py")
    if wsgi_path.exists():
        with open(wsgi_path, 'r') as f:
            content = f.read()
            if 'WhiteNoise' in content:
                print("‚úÖ WhiteNoise configur√© dans wsgi.py")
                if 'add_files' in content:
                    print("‚úÖ Configuration media ajout√©e")
                else:
                    print("‚ö†Ô∏è  Configuration media manquante")
            else:
                print("‚ùå WhiteNoise non configur√© dans wsgi.py")
    
    return True

def test_image_access():
    """Tester l'acc√®s aux images"""
    print("\nüñºÔ∏è  Test d'acc√®s aux images...")
    
    media_root = Path("media")
    if not media_root.exists():
        return False
    
    # Chercher des images de test
    test_images = []
    for subdir in ['products', 'teams', 'categories']:
        subdir_path = media_root / subdir
        if subdir_path.exists():
            images = list(subdir_path.glob('*.jpg')) + list(subdir_path.glob('*.png'))
            test_images.extend(images[:2])
    
    if not test_images:
        print("‚ö†Ô∏è  Aucune image trouv√©e pour les tests")
        return False
    
    print(f"üì∏ Images de test trouv√©es: {len(test_images)}")
    
    # Tester l'acc√®s
    for img in test_images[:3]:
        relative_path = img.relative_to(media_root)
        url_path = f"/media/{relative_path}"
        print(f"   Image: {img.name}")
        print(f"   Chemin relatif: {relative_path}")
        print(f"   URL attendue: {url_path}")
        print(f"   Taille: {img.stat().st_size} bytes")
        print()
    
    return True

def generate_nginx_config():
    """G√©n√©rer une configuration Nginx pour les images"""
    print("\n‚öôÔ∏è  G√©n√©ration de la configuration Nginx...")
    
    config = f"""server {{
    listen 80;
    server_name orapide.shop www.orapide.shop;
    
    # Configuration des fichiers statiques
    location /static/ {{
        alias {Path.cwd() / 'staticfiles'}/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }}
    
    # Configuration des fichiers media (IMAGES DES PRODUITS)
    location /media/ {{
        alias {Path.cwd() / 'media'}/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Types MIME pour les images
        location ~* \.(jpg|jpeg|png|gif|webp)$ {{
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }}
    }}
    
    # Proxy vers Gunicorn
    location / {{
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }}
}}"""
    
    # Sauvegarder la configuration
    with open("nginx_images.conf", "w") as f:
        f.write(config)
    
    print("‚úÖ Configuration Nginx g√©n√©r√©e: nginx_images.conf")
    return True

def main():
    """Fonction principale"""
    print("üñºÔ∏è  Diagnostic des images en production")
    print("=" * 50)
    
    # V√©rifications
    check_media_files()
    check_permissions()
    check_urls()
    test_image_access()
    generate_nginx_config()
    
    print("\nüìã R√âSUM√â DES ACTIONS √Ä EFFECTUER:")
    print("1. Copier nginx_images.conf vers /etc/nginx/sites-available/")
    print("2. Red√©marrer Nginx: sudo systemctl restart nginx")
    print("3. Red√©marrer Django: sudo systemctl restart ecom_maillot")
    print("4. Tester une image: http://orapide.shop/media/products/nom_image.jpg")
    
    print("\nüîç V√âRIFICATIONS:")
    print("- Les images sont-elles dans le dossier media/ ?")
    print("- Les permissions sont-elles correctes (755) ?")
    print("- Nginx est-il configur√© pour servir /media/ ?")
    print("- L'application Django red√©marre-t-elle ?")

if __name__ == "__main__":
    main()
